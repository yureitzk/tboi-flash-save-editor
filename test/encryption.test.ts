import { secretsNamesArray } from '../src/consts/names';
import { decrypt, encrypt, initializeChecker } from '../src/utils/helpers';

describe('initializeChecker', () => {
	it('Should return an array of length 401', () => {
		const result = initializeChecker();
		expect(result.length).toBe(401);
	});

	it('Should have the correct value at index 0', () => {
		const result = initializeChecker();
		expect(result[0]).toBe(8);
	});
});

describe('decrypt', () => {
	it('A default string should contain only disabled secrets', () => {
		const result = decrypt(
			'8368483363880048035328074003133807600214336760522433686332640368683366830848736388004803532807400313380760021433666032240368683264836848336388084873538807450313280740021138676052143366603224036868326408368483363880048035328074003133807600214336760522433686332640368683366830848736388004803532807400313380760021433666032240368683264836848336388084873538807450313280740021138686052143366603224036868326',
			secretsNamesArray,
		);
		expect(result.length).toBe(secretsNamesArray.length);

		expect(result.every((secret) => secret.unlocked === false)).toBe(true);
	});

	it('This string should have all the unlocks', () => {
		const result = decrypt(
			'8368483363880242075421014404153202610417376862552834616636650562633468860349756683014106572909430714310164031636616134270769613568846142376481024374558202460516230842051539696356153569643326066369346703378686313982078436348378013336847702214336760522433686332640368683366830848736388004803532807400313380760021433666032240368683264836848336388084873538807450313280740021138676052143366603224036868326',
			secretsNamesArray,
		);
		expect(result.length).toBe(secretsNamesArray.length);

		expect(result.every((secret) => secret.unlocked === true)).toBe(true);
	});
});

describe('encrypt', () => {
	it('A string should remain the same if no modifications was made', () => {
		const originalEncryptedData =
			'8368483363880242075421014404153202610417376862552834616636650562633468860349756683014106572909430714310164031636616134270769613568846142376481024374558202460516230842051539696356153569643326066369346703378686313982078436348378013336847702214336760522433686332640368683366830848736388004803532807400313380760021433666032240368683264836848336388084873538807450313280740021138676052143366603224036868326';
		const secretsCheckArray = decrypt(originalEncryptedData, secretsNamesArray);
		const result = encrypt(secretsCheckArray);

		expect(result).toBe(originalEncryptedData);
	});
});
